# : << EOF
#
# /!\ do not edit this file
#     instead, override settings in ~/.tmux.conf.local
#
# --_an_altvu_construct_ --------------------------------------------------------
#
#  general
set -g prefix C-a
bind C-a send-prefix
setw -g mode-keys vi
set -q -g utf8 on 

# display 
set -g display-panes-time 600 
set -g display-time 2000      

# enable true colors
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",*256col*:Tc"

# edit configuration
# bind e new-window -n "~/.tmux/.tmux.conf.local" "EDITOR=\${EDITOR//nano} && EDITOR=\${EDITOR//nano} && \${EDITOR:nano} ~/.tmux.conf.local && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\""

# reload configuration
bind r source-file ~/.tmux/.tmux.conf \; display '~/.tmux/.tmux.conf sourced'

# copy to x11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'

# -- user defined overrides ----------------------------------------------------

source -q ~/.tmux/.tmux.conf.local \; display '~/.tmux/.tmux.conf.local also sourced'

run 'cut -c3- ~/.tmux.conf | sh -s _apply_configuration'

# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# unset GREP_OPTIONS
# export LC_NUMERIC=C
#
# if ! printf '' | sed -E 's///' 2>/dev/null; then
#   if printf '' | sed -r 's///' 2>/dev/null; then
#     sed () {
#       n=$#; while [ "$n" -gt 0 ]; do arg=$1; shift; case $arg in -E*) arg=-r${arg#-E};; esac; set -- "$@" "$arg"; n=$(( n - 1 )); done
#       command sed "$@"
#     }
#   fi
# fi
#
# _uname_s=$(uname -s)
#
# _tmux_version=$(tmux -V | tr -cd '0123456789.' | cut -d' ' -f2 | awk -F '.' '{print $1 * 100 + $2}')
#
# _is_enabled() {
#   [ x"$1" = x"true" ] || [ x"$1" = x"yes" ] || [ x"$1" = x"enabled" ] || [ x"$1" = x"1" ]
# }
#
#_circled() {
#  circled_digits='⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳'
#  if [ "$1" -le 20 ] 2>/dev/null; then
#    i=$(( $1 + 1 ))
#    eval set -- "$circled_digits"
#    eval echo "\${$i}"
#  else
#    echo "$1"
#  fi
#}
#
# _decode_unicode_escapes() {
#   printf '%s' "$*" | perl -CS -pe 's/(\\u([0-9A-Fa-f]{1,4})|\\U([0-9A-Fa-f]{1,8}))/chr(hex($2.$3))/eg' 2>/dev/null
# }
#
# if command -v pkill > /dev/null 2>&1; then
#   _pkillf() {
#     pkill -f "$@" || true
